* HTTP example
  1. [X] Download NetworkUsage.zip
     #+BEGIN_SRC sh
       wget http://developer.android.com/shareables/training/NetworkUsage.zip
     #+END_SRC
     + md5sum 36175872289ecd7e400fed92324890b6  NetworkUsage.zip
  2. [X] unzip
  3. [ ] chmod 0544 NetworkUsage
  4. [ ] slurp function from NetworkActivity.java
     #+BEGIN_SRC java
       // Given a string representation of a URL, sets up a connection and gets
       // an input stream.
       private InputStream downloadUrl(String urlString) throws IOException {
           URL url = new URL(urlString);
           HttpURLConnection conn = (HttpURLConnection) url.openConnection();
           conn.setReadTimeout(10000 /* milliseconds */);
           conn.setConnectTimeout(15000 /* milliseconds */);
           conn.setRequestMethod("GET");
           conn.setDoInput(true);
           // Starts the query
           conn.connect();
           InputStream stream = conn.getInputStream();
           return stream;
       }
     #+END_SRC
     
  
* SNIPPET ATTEMPT #1
  + From http://developer.android.com/training/basics/network-ops/connecting.html#http-client
  #+BEGIN_SRC java :tangle /tmp/snippet-attempt-1
    // BEGIN SECTION SNIPPET ATTEMPT 1
    // Given a URL, establishes an HttpUrlConnection and retrieves
    // the web page content as a InputStream, which it returns as
    // a string.
    private String downloadUrl(String myurl) throws IOException {
        InputStream is = null;
        // Only display the first 500 characters of the retrieved
        // web page content.
        int len = 500;
            
        try {
            URL url = new URL(myurl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setReadTimeout(10000 /* milliseconds */);
            conn.setConnectTimeout(15000 /* milliseconds */);
            conn.setRequestMethod("GET");
            conn.setDoInput(true);
            // Starts the query
            conn.connect();
            int response = conn.getResponseCode();
            Log.d(DEBUG_TAG, "The response is: " + response);
            is = conn.getInputStream();
    
            // Convert the InputStream into a string
            String contentAsString = readIt(is, len);
            return contentAsString;
            
        // Makes sure that the InputStream is closed after the app is
        // finished using it.
        } finally {
            if (is != null) {
                is.close();
            } 
        }
    }
    
    // Reads an InputStream and converts it to a String.
    public String readIt(InputStream stream, int len) throws IOException, UnsupportedEncodingException {
        Reader reader = null;
        reader = new InputStreamReader(stream, "UTF-8");        
        char[] buffer = new char[len];
        reader.read(buffer);
        return new String(buffer);
    }
    // END SECTION SNIPPET ATTEMPT 1
  #+END_SRC
