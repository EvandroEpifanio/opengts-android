* Log
** 2014-03-28
   + Added Nema Field
* SUCCESS1
  #+BEGIN_SRC java
    // BEGIN TDW  
    public void nema(View v) {
        Location currentLocation = mLocationClient.getLastLocation();
        // mLatLng.setText("nema");
        // mLatLng.setText(LocationUtils.getLatLng(this, currentLocation));
        mLatLng.setText(GPRMCEncode(currentLocation));
    }
    
    /**
       ,,* Encode a location as GPRMC string data.
       ,,* <p/>
       ,,* For details check org.opengts.util.Nmea0183#_parse_GPRMC(String)
       ,,* (OpenGTS source)
       ,,*
       ,,* @param loc location
       ,,* @return GPRMC data
       ,,*/
    public static String GPRMCEncode(Location loc) {
        DecimalFormatSymbols dfs = new DecimalFormatSymbols(Locale.US);
        DecimalFormat f = new DecimalFormat("0.000000", dfs);
            
        String gprmc = String.format("%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,,",
                                     "$GPRMC",
                                     NMEAGPRMCTime(new Date(loc.getTime())),
                                     "A",
                                     NMEAGPRMCCoord(Math.abs(loc.getLatitude())),
                                     (loc.getLatitude() >= 0) ? "N" : "S",
                                     NMEAGPRMCCoord(Math.abs(loc.getLongitude())),
                                     (loc.getLongitude() >= 0) ? "E" : "W",
                                     f.format(MetersPerSecondToKnots(loc.getSpeed())),
                                     f.format(loc.getBearing()),
                                     NMEAGPRMCDate(new Date(loc.getTime()))
                                     );
            
        gprmc += "*" + NMEACheckSum(gprmc);
            
        return gprmc;
    }
        
    public static String NMEAGPRMCTime(Date dateToFormat) {
        SimpleDateFormat sdf = new SimpleDateFormat("HHmmss.SSS");
        sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
        return sdf.format(dateToFormat);
    }
        
    public static String NMEAGPRMCDate(Date dateToFormat) {
        SimpleDateFormat sdf = new SimpleDateFormat("ddMMyy");
        sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
        return sdf.format(dateToFormat);
    }
        
    public static String NMEAGPRMCCoord(double coord) {
        // “DDDMM.MMMMM”
        int degrees = (int) coord;
        double minutes = (coord - degrees) * 60;
            
        DecimalFormat df = new DecimalFormat("00.00000", new DecimalFormatSymbols(Locale.US));
        StringBuilder rCoord = new StringBuilder();
        rCoord.append(degrees);
        rCoord.append(df.format(minutes));
            
        return rCoord.toString();
    }
        
    public static String NMEACheckSum(String msg) {
        int chk = 0;
        for (int i = 1; i < msg.length(); i++)
            {
                chk ^= msg.charAt(i);
            }
        String chk_s = Integer.toHexString(chk).toUpperCase();
        while (chk_s.length() < 2)
            {
                chk_s = "0" + chk_s;
            }
        return chk_s;
    }
        
    /**
       ,,* Converts given meters/second to nautical mile/hour.
       ,,*
       ,,* @param mps meters per second
       ,,* @return knots
       ,,*/
    public static double MetersPerSecondToKnots(double mps) {
        // Google "meters per second to knots"
        return mps * 1.94384449;
    }
        
    // END TDW
    
  #+END_SRC
  #+BEGIN_SRC xml
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/main_layout"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <Button
        android:id="@+id/nema"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentLeft="false"
        android:layout_below="@+id/stop_updates"
        android:layout_centerHorizontal="true"
        android:gravity="center_vertical|center_horizontal"
        android:onClick="nema"
        android:text="@string/stop_updates" />

</RelativeLayout>
  
  #+END_SRC
  
* [/] Run LocationUpdates Step by step
  1. [ ] Download and Import
     1. [ ] Download LocationUpdates.zip from http://developer.android.com/training/location/retrieve-current.html
	+ md5sum e3c28cbea2dbcc26f4a31489dbb5c187  LocationUpdates.zip
     2. [ ] Unzip LocationUpdates.zip
     3. [ ] Import -> Android -> Existing Android Code Into Workspace
	1. [ ] New Project Name -> opengts-android
	2. [ ] Copy projects into workspace
        3. [ ] Finish
  2. [ ] Fix "The import com.google.android.gms cannot be resolved" error
     Note: This error appears in MainActivity.java
     1. [ ] Import google-play-services_lib into workspace
	1. [ ] download the Google Play services SDK from the SDK Manager
           + ~/Development/adt-bundle-linux-x86-20131030/sdk/extras/google/google_play_services/libproject
        2. [ ] import the library project into your workspace.
	   1. [ ] Click File > Import, select Android > Existing Android Code into Workspace,
	      + Select ~/Development/adt-bundle-linux-x86-20131030/sdk/extras/google/google_play_services/libproject/google-play-services_lib
	3. [ ] Right Click -> Properties -> Android -> Library -> Add -> google-play-services_lib
	   1. Note: "Open Project" on google-play-services_lib
  3. [ ] Fix "import android.support.v4.app.DialogFragment;"
     1. [ ] Import
        1. [ ] Skim http://developer.android.com/tools/support-library/setup.html
        2. [ ] Skim http://developer.android.com/tools/support-library/setup.html#add-library
        3. [ ] Create a libs/ directory in the root of the application project.
	   #+BEGIN_SRC sh
	      cd ~/workspace/opengts-android/ && mkdir libs
	   #+END_SRC
        4. [ ] Copy the JAR file from your Android SDK installation
           directory
           1. [ ] Copy android-support-v4.jar
              #+BEGIN_SRC sh
                cd ~/workspace/opengts-android/libs
                cp -v ~/Development/adt-bundle-linux-x86-20131030/sdk/extras/android/support/v4/android-support-v4.jar .
              #+END_SRC
           2. [ ] Right click the JAR file and select Build Path > Add
              to Build Path.
              1. Note: Highlight project and F5 to make lib dir show up
              2. Note: The error messages in Eclipse ought to disappear.
  4. [ ] Fix program crashing by adding google play services to [[file:~/workspace/opengts-android/AndroidManifest.xml][AndroidManifest.xml]] 
     1. [ ] (Optional,for background) Skim [[http://developer.android.com/tools/index.html][Developer Tools]]
     2. [ ] (Optional,for background) Skim [[http://developer.android.com/tools/workflow/index.html][Workflow]]
     3. [ ] (Optional,for background) Skim [[http://developer.android.com/google/play-services/index.html][Google Play Services]]
	1. [ ] Skim [[http://developer.android.com/google/play-services/setup.html][Set Up Google Play Services SDK]]
	   1. [ ] Skim [[http://developer.android.com/google/play-services/setup.html#Setup][Set Up a Project that Uses Google Play Services]]
	      1. [ ] Fix play version
                 Place just before closing </application> tag
                 in [[file:~/workspace/opengts-android/AndroidManifest.xml][AndroidManifest.xml]]
                 #+BEGIN_SRC xml
                   <meta-data android:name="com.google.android.gms.version"
                              android:value="@integer/google_play_services_version" />
                 #+END_SRC
  5. [ ] Run on a real device
     1. [ ] Connect android device, e.g. Nexus 5
     2. [ ] Run
* [/] Add NMEA code from OpenGTSClient.java Step by step
  1. [ ] Add following java functions to [[file:~/workspace/opengts-android/src/com/example/android/location/MainActivity.java][MainActivity.java]]
     1. [ ] Move cursor to closing parenthesis at the end of [[file:~/workspace/opengts-android/src/com/example/android/location/MainActivity.java][MainActivity.java]]
     2. [ ] Insert newline and indent (Ctrl-j)
     3. [ ] Insert GPRMCEncode functions 
	#+BEGIN_SRC java :tangle /tmp/GPRMCEncode.java
          // BEGIN SECTION GPRMC
          /**
             ,,* Encode a location as GPRMC string data.
             ,,* <p/>
             ,,* For details check org.opengts.util.Nmea0183#_parse_GPRMC(String)
             ,,* (OpenGTS source)
             ,,*
             ,,* @param loc location
             ,,* @return GPRMC data
             ,,*/
          public static String GPRMCEncode(Location loc)
          {
              DecimalFormatSymbols dfs = new DecimalFormatSymbols(Locale.US);
              DecimalFormat f = new DecimalFormat("0.000000", dfs);
              
              String gprmc = String.format("%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,,",
                                           "$GPRMC",
                                           NMEAGPRMCTime(new Date(loc.getTime())),
                                           "A",
                                           NMEAGPRMCCoord(Math.abs(loc.getLatitude())),
                                           (loc.getLatitude() >= 0) ? "N" : "S",
                                           NMEAGPRMCCoord(Math.abs(loc.getLongitude())),
                                           (loc.getLongitude() >= 0) ? "E" : "W",
                                           f.format(MetersPerSecondToKnots(loc.getSpeed())),
                                           f.format(loc.getBearing()),
                                           NMEAGPRMCDate(new Date(loc.getTime()))
                                           );
              
              gprmc += "*" + NMEACheckSum(gprmc);
              
              return gprmc;
          }
              
          public static String NMEAGPRMCTime(Date dateToFormat)
          {
              SimpleDateFormat sdf = new SimpleDateFormat("HHmmss.SSS");
              sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
              return sdf.format(dateToFormat);
          }
              
          public static String NMEAGPRMCDate(Date dateToFormat)
          {
              SimpleDateFormat sdf = new SimpleDateFormat("ddMMyy");
              sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
              return sdf.format(dateToFormat);
          }
              
          public static String NMEAGPRMCCoord(double coord)
          {
              // “DDDMM.MMMMM”
              int degrees = (int) coord;
              double minutes = (coord - degrees) * 60;
              
              DecimalFormat df = new DecimalFormat("00.00000", new DecimalFormatSymbols(Locale.US));
              StringBuilder rCoord = new StringBuilder();
              rCoord.append(degrees);
              rCoord.append(df.format(minutes));
              
              return rCoord.toString();
          }
              
              
          public static String NMEACheckSum(String msg)
          {
              int chk = 0;
              for (int i = 1; i < msg.length(); i++)
                  {
                      chk ^= msg.charAt(i);
                  }
              String chk_s = Integer.toHexString(chk).toUpperCase();
              while (chk_s.length() < 2)
                  {
                      chk_s = "0" + chk_s;
                  }
              return chk_s;
          }
              
          /**
             ,,* Converts given meters/second to nautical mile/hour.
             ,,*
             ,,* @param mps meters per second
             ,,* @return knots
             ,,*/
          public static double MetersPerSecondToKnots(double mps)
          {
              // Google "meters per second to knots"
              return mps * 1.94384449;
          }
          // END SECTION GPRMC
        #+END_SRC
     4. [ ] Verify that program runs
  2. [ ] Change Latitude/Longitude string to NMEA string
     1. [ ] Find following spot in [[file:~/workspace/opengts-android/src/com/example/android/location/MainActivity.java][MainActivity.java]]
        #+BEGIN_SRC java
          // In the UI, set the latitude and longitude to the value received
          mLatLng.setText(LocationUtils.getLatLng(this, location));
        #+END_SRC
     2. [ ] 
	#+BEGIN_SRC java
          // In the UI, set the latitude and longitude to the value received
          // mLatLng.setText(LocationUtils.getLatLng(this, location));
          mLatLng.setText(GPRMCEncode(location));
	#+END_SRC
  3. [ ] run
* [/] Send HTTP get request with NMEA string
** What we need to do
   http://71.104.3.13:8080/gprmc/Data?acct=troy&dev=tc&gprmc=$GPRMC,182840,A,3128.7540N,14257.6714,W,000.0,000.0,090114,,*a
* NMEA
  http://www.gpsinformation.org/dale/nmea.htm#nmea

  $GPRMC,123519,A,4807.038,N,01131.000,E,022.4,084.4,230394,003.1,W*6A

Where:
     RMC          Recommended Minimum sentence C
     123519       Fix taken at 12:35:19 UTC
     A            Status A=active or V=Void.
     4807.038,N   Latitude 48 deg 07.038' N
     01131.000,E  Longitude 11 deg 31.000' E
     022.4        Speed over the ground in knots
     084.4        Track angle in degrees True
     230394       Date - 23rd of March 1994
     003.1,W      Magnetic Variation
     *6A          The checksum data, always begins with *

         
        $GPRMC,222820,A,3128.7540,N,14257.6714,W,000.0,000.0,271213,,*c";

        "http://71.104.3.13:8080/gprmc/Data?" +
        "acct=prestige&dev=town_and_country&gprmc=$GPRMC,222820,A,3128.7540,N,14257.6714,W,000.0,000.0,271213,,*c";

* Android NMEA
** [[http://developer.android.com/reference/android/location/GpsStatus.NmeaListener.html][GpsStatus.NmeaListener]]
   [[http://developer.android.com/reference/android/location/LocationManager.html#addNmeaListener(android.location.GpsStatus.NmeaListener)][addNmeaListener]]

* [[file:/home/troy/workspace/opengts-android/res/layout/activity_main.xml]]

    <TextView
        android:id="@+id/label_nema"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentLeft="true"
        android:layout_alignParentTop="true"
        android:text="@string/latlng"
        android:textSize="20sp" />

    <TextView
        android:id="@+id/nema"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignBaseline="@+id/label_nema"
        android:layout_marginLeft="10dp"
        android:layout_toRightOf="@+id/label_nema"
        android:textIsSelectable="true"
        android:textSize="20sp" />

          <!-- android:layout_alignParentTop="true" -->
          <!-- android:layout_below="@+id/label_nema" -->

  /home/troy/workspace/opengts-android/res/layout/activity_main.xml :padline no
	
  #+BEGIN_SRC xml :tangle /tmp/activity_main.xml :padline no
    <?xml version="1.0" encoding="utf-8"?>
    <!--
    Copyright (C) 2013 The Android Open Source Project
    
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
    http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    -->
    <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
                    android:id="@+id/main_layout"
                    android:layout_width="match_parent"
                    android:layout_height="match_parent">
      
      <TextView
          android:id="@+id/label_nema"
          android:layout_width="wrap_content"
          android:layout_height="wrap_content"
          android:layout_alignParentLeft="true"
          android:layout_alignParentTop="true"
          android:text="NEMA"
          android:textSize="20sp" />

      <TextView
          android:id="@+id/label_lat_lng"
          android:layout_width="wrap_content"
          android:layout_height="wrap_content"
          android:layout_alignParentLeft="true"
          android:layout_below="@+id/label_nema"
          android:text="@string/latlng"
          android:textSize="20sp" />
      
      <TextView
          android:id="@+id/lat_lng"
          android:layout_width="wrap_content"
          android:layout_height="wrap_content"
          android:layout_alignBaseline="@+id/label_lat_lng"
          android:layout_marginLeft="10dp"
          android:layout_toRightOf="@+id/label_lat_lng"
          android:textIsSelectable="true"
          android:textSize="20sp" />
      
      <TextView
          android:id="@+id/label_address"
          android:layout_width="wrap_content"
          android:layout_height="wrap_content"
          android:layout_alignParentLeft="true"
          android:layout_below="@+id/label_lat_lng"
          android:text="@string/address"
          android:textSize="20sp" />
      
      <ProgressBar
          android:id="@+id/address_progress"
          android:layout_width="wrap_content"
          android:layout_height="wrap_content"
          android:layout_below="@id/label_lat_lng"
          android:layout_centerHorizontal="true"
          android:indeterminate="true"
          android:visibility="gone" />
      
      <TextView
          android:id="@+id/address"
          android:layout_width="wrap_content"
          android:layout_height="wrap_content"
          android:layout_toRightOf="@+id/label_address"
          android:layout_alignBaseline="@+id/label_address"
          android:layout_below="@+id/lat_lng"
          android:layout_marginLeft="10dp"
          android:text="placeholder"
          android:textSize="20sp"
          android:textIsSelectable="true"/>
      
      <TextView
          android:id="@+id/text_connection_status"
          android:layout_width="wrap_content"
          android:layout_height="wrap_content"
          android:layout_alignParentLeft="true"
          android:layout_below="@+id/address"
          android:text="@string/unknown"
          android:textIsSelectable="true" />
      
      <TextView
          android:id="@+id/text_connection_state"
          android:layout_width="wrap_content"
          android:layout_height="wrap_content"
          android:layout_alignParentLeft="true"
          android:layout_below="@+id/text_connection_status"
          android:text="@string/unknown"
          android:textIsSelectable="true"/>
      
      <Button
          android:id="@+id/get_location_button"
          android:layout_width="wrap_content"
          android:layout_height="wrap_content"
          android:layout_below="@+id/text_connection_state"
          android:layout_centerHorizontal="true"
          android:onClick="getLocation"
          android:layout_marginTop="10dp"
          android:text="@string/get_location" />
      
      <Button
          android:id="@+id/start_updates"
          android:layout_width="wrap_content"
          android:layout_height="wrap_content"
          android:layout_below="@+id/get_address_button"
          android:layout_centerHorizontal="true"
          android:onClick="startUpdates"
          android:text="@string/start_updates" />
      
      <Button
          android:id="@+id/get_address_button"
          android:layout_width="wrap_content"
          android:layout_height="wrap_content"
          android:layout_below="@+id/get_location_button"
          android:layout_centerHorizontal="true"
          android:onClick="getAddress"
          android:text="@string/get_address" />
      
      <Button
          android:id="@+id/stop_updates"
          android:layout_width="wrap_content"
          android:layout_height="wrap_content"
          android:layout_alignParentLeft="false"
          android:layout_below="@+id/start_updates"
          android:layout_centerHorizontal="true"
          android:gravity="center_vertical|center_horizontal"
          android:onClick="stopUpdates"
          android:text="@string/stop_updates" />
      
      <Button
          android:id="@+id/nema"
          android:layout_width="wrap_content"
          android:layout_height="wrap_content"
          android:layout_alignParentLeft="false"
          android:layout_below="@+id/stop_updates"
          android:layout_centerHorizontal="true"
          android:gravity="center_vertical|center_horizontal"
          android:onClick="nema"
          android:text="@string/stop_updates" />
      
    </RelativeLayout>
  #+END_SRC
* Existing NMEA code from OpenGTSClient.java
  #+BEGIN_SRC java :tangle /tmp/g.java
    /*
    ,*    This file is part of GPSLogger for Android.
    ,*
    ,*    GPSLogger for Android is free software: you can redistribute it and/or modify
    ,*    it under the terms of the GNU General Public License as published by
    ,*    the Free Software Foundation, either version 2 of the License, or
    ,*    (at your option) any later version.
    ,*
    ,*    GPSLogger for Android is distributed in the hope that it will be useful,
    ,*    but WITHOUT ANY WARRANTY; without even the implied warranty of
    ,*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    ,*    GNU General Public License for more details.
    ,*
    ,*    You should have received a copy of the GNU General Public License
    ,*    along with GPSLogger for Android.  If not, see <http://www.gnu.org/licenses/>.
    ,*/
    
    package com.mendhak.gpslogger.common;
    
    import android.content.Context;
    import android.location.Location;
    import com.loopj.android.http.AsyncHttpClient;
    import com.loopj.android.http.AsyncHttpResponseHandler;
    import com.loopj.android.http.RequestParams;
    
    import java.text.DecimalFormat;
    import java.text.DecimalFormatSymbols;
    import java.text.SimpleDateFormat;
    import java.util.Date;
    import java.util.Locale;
    import java.util.TimeZone;
    
    
    /**
     ,* OpenGTS Client
     ,*
     ,* @author Francisco Reynoso <franole @ gmail.com>
     ,*/
    public class OpenGTSClient
    {
    
        private Context applicationContext;
        private IActionListener callback;
        private String server;
        private Integer port;
        private String path;
        private AsyncHttpClient httpClient;
        private int locationsCount = 0;
        private int sentLocationsCount = 0;
    
    
        public OpenGTSClient(String server, Integer port, String path, IActionListener callback, Context applicationContext)
        {
            this.server = server;
            this.port = port;
            this.path = path;
            this.callback = callback;
            this.applicationContext = applicationContext;
        }
    
        public void sendHTTP(String id, Location location)
        {
            sendHTTP(id, new Location[]{location});
        }
    
        /**
         ,* Send locations sing HTTP GET request to the server
         ,* <p/>
         ,* See <a href="http://opengts.sourceforge.net/OpenGTS_Config.pdf">OpenGTS_Config.pdf</a>
         ,* section 9.1.2 Default "gprmc" Configuration
         ,*
         ,* @param id        id of the device
         ,* @param locations locations
         ,*/
    
        public void sendHTTP(String id, Location[] locations)
        {
            try
            {
                locationsCount = locations.length;
                StringBuilder url = new StringBuilder();
                url.append("http://");
                url.append(getURL());
    
                httpClient = new AsyncHttpClient();
    
                for (Location loc : locations)
                {
                    RequestParams params = new RequestParams();
                    params.put("id", id);
                    params.put("code", "0xF020");
                    params.put("gprmc", OpenGTSClient.GPRMCEncode(loc));
                    params.put("alt", String.valueOf(loc.getAltitude()));
    
    
                    Utilities.LogDebug("Sending URL " + url + " with params " + params.toString());
                    httpClient.get(applicationContext, url.toString(), params, new MyAsyncHttpResponseHandler(this));
                }
            }
            catch (Exception e)
            {
                Utilities.LogError("OpenGTSClient.sendHTTP", e);
                OnFailure();
            }
        }
    
        public void sendRAW(String id, Location location)
        {
            // TODO
        }
    
        private void sendRAW(String id, Location[] locations)
        {
            // TODO
        }
    
        private String getURL()
        {
            StringBuilder url = new StringBuilder();
            url.append(server);
            if (port != null)
            {
                url.append(":");
                url.append(port);
            }
            if (path != null)
            {
                url.append(path);
            }
            return url.toString();
        }
    
    
        private class MyAsyncHttpResponseHandler extends AsyncHttpResponseHandler
        {
            private OpenGTSClient callback;
    
            public MyAsyncHttpResponseHandler(OpenGTSClient callback)
            {
                super();
                this.callback = callback;
            }
    
            @Override
            public void onSuccess(String response)
            {
                Utilities.LogInfo("Response Success :" + response);
                callback.OnCompleteLocation();
            }
    
            @Override
            public void onFailure(Throwable e, String response)
            {
                Utilities.LogError("OnCompleteLocation.MyAsyncHttpResponseHandler Failure with response :" + response, new Exception(e));
                callback.OnFailure();
            }
        }
    
        public void OnCompleteLocation()
        {
            sentLocationsCount += 1;
            Utilities.LogDebug("Sent locations count: " + sentLocationsCount + "/" + locationsCount);
            if (locationsCount == sentLocationsCount)
            {
                OnComplete();
            }
        }
    
        public void OnComplete()
        {
            callback.OnComplete();
        }
    
        public void OnFailure()
        {
            httpClient.cancelRequests(applicationContext, true);
            callback.OnFailure();
        }
    
        /**
         ,* Encode a location as GPRMC string data.
         ,* <p/>
         ,* For details check org.opengts.util.Nmea0183#_parse_GPRMC(String)
         ,* (OpenGTS source)
         ,*
         ,* @param loc location
         ,* @return GPRMC data
         ,*/
        public static String GPRMCEncode(Location loc)
        {
            DecimalFormatSymbols dfs = new DecimalFormatSymbols(Locale.US);
            DecimalFormat f = new DecimalFormat("0.000000", dfs);
    
            String gprmc = String.format("%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,,",
                    "$GPRMC",
                    NMEAGPRMCTime(new Date(loc.getTime())),
                    "A",
                    NMEAGPRMCCoord(Math.abs(loc.getLatitude())),
                    (loc.getLatitude() >= 0) ? "N" : "S",
                    NMEAGPRMCCoord(Math.abs(loc.getLongitude())),
                    (loc.getLongitude() >= 0) ? "E" : "W",
                    f.format(MetersPerSecondToKnots(loc.getSpeed())),
                    f.format(loc.getBearing()),
                    NMEAGPRMCDate(new Date(loc.getTime()))
            );
    
            gprmc += "*" + NMEACheckSum(gprmc);
    
            return gprmc;
        }
    
        public static String NMEAGPRMCTime(Date dateToFormat)
        {
            SimpleDateFormat sdf = new SimpleDateFormat("HHmmss.SSS");
            sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
            return sdf.format(dateToFormat);
        }
    
        public static String NMEAGPRMCDate(Date dateToFormat)
        {
            SimpleDateFormat sdf = new SimpleDateFormat("ddMMyy");
            sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
            return sdf.format(dateToFormat);
        }
    
        public static String NMEAGPRMCCoord(double coord)
        {
            // “DDDMM.MMMMM”
            int degrees = (int) coord;
            double minutes = (coord - degrees) * 60;
    
            DecimalFormat df = new DecimalFormat("00.00000", new DecimalFormatSymbols(Locale.US));
            StringBuilder rCoord = new StringBuilder();
            rCoord.append(degrees);
            rCoord.append(df.format(minutes));
    
            return rCoord.toString();
        }
    
    
        public static String NMEACheckSum(String msg)
        {
            int chk = 0;
            for (int i = 1; i < msg.length(); i++)
            {
                chk ^= msg.charAt(i);
            }
            String chk_s = Integer.toHexString(chk).toUpperCase();
            while (chk_s.length() < 2)
            {
                chk_s = "0" + chk_s;
            }
            return chk_s;
        }
    
        /**
         ,* Converts given meters/second to nautical mile/hour.
         ,*
         ,* @param mps meters per second
         ,* @return knots
         ,*/
        public static double MetersPerSecondToKnots(double mps)
        {
            // Google "meters per second to knots"
            return mps * 1.94384449;
        }
    
    }
    
  #+END_SRC
  
